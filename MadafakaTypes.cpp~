#include <string>
#include <iostream>
#ifndef MADAFAKATYPES_H
#include "MadafakaTypes.hpp"
#endif
using namespace std;
/**
 * @class MadafakaTypes "MadafakaTypes.h"
 * 
 * Implementación de las clases del Sistema de Tipos
 * 
 * @author Gustavo El Khoury <gustavoelkoury@gmail.com>
 * @author Wilmer Bandres <wilmer0593@gmail.com>
 */

//campos estaticos de IntegerType
IntegerType *IntegerType::singleton_instance = NULL;

//Campos estaticos de FloatType
FloatType *FloatType::singleton_instance = NULL;

//Campos estaticos de StringType
StringType *StringType::singleton_instance = NULL;

//Same as before
CharType *CharType::singleton_instance = NULL;
//int CharType::tam = 1;

//Same
BoolType *BoolType::singleton_instance = NULL;
//int BoolType::tam = 1;


//" "
VoidType *VoidType::singleton_instance = NULL;

//" "
RefType *RefType::singleton_instance = NULL;

//" "
TypeError *TypeError::singleton_instance = NULL;

//" "
Undeclared *Undeclared::singleton_instance = NULL;

//definiendo el print de un MadafakaType
void MadafakaType::print(){
		cout << "Tipo: " << name;
		return;
}
//Redefiniendo operador == para MadafakaType
bool MadafakaType::operator==(MadafakaType &rhs){
    return name==rhs.name;
}

bool MadafakaType::operator!=(MadafakaType &rhs){
    return name!=rhs.name;
}

// redefiniendo operador == MadafakaType con un string
bool MadafakaType::operator==(const char* word){
    return name==string(word);
}

bool MadafakaType::operator!=(const char* word){
    return name!=string(word);
}

std::ostream& operator<<(std::ostream &os,MadafakaType const &var) { 
    return os << var.name;
}

MadafakaType::operator string() const{
  return name;
}

//constructor de un IntegerType, el tamanio de un IntegerType es 0
IntegerType::IntegerType(){
 		name = "Idafak";
		tam = 4;
 	};

IntegerType* IntegerType::instance(){
 	if (!singleton_instance)
        	singleton_instance = new IntegerType();
       	return singleton_instance;
 	};

//constructor de un FloatType, el tamanio de un FloatType es 0
FloatType::FloatType(){
 		name = "Fdafak";
		tam =8;
};
FloatType* FloatType::instance(){
 		if (!singleton_instance)
        	singleton_instance = new FloatType();
       	return singleton_instance;
 	};

//constructor de un StringType
StringType::StringType(){
 		name = "Sdafak";
		tam =4;
};

StringType* StringType::instance(){
 		if (!singleton_instance)
        	singleton_instance = new StringType();
       	return singleton_instance;
 	};
	
	
//constructor
CharType::CharType(){
 		name = "Cdafak";
		tam = 1;
};
CharType* CharType::instance(){
 		if (!singleton_instance)
        	singleton_instance = new CharType();
       	return singleton_instance;
};

//constructor
BoolType::BoolType(){
    name = "Bdafak";
    tam = 1;
};
BoolType* BoolType::instance(){
    if (!singleton_instance)
          singleton_instance = new BoolType();
        return singleton_instance;
};

//constructor
VoidType::VoidType(){
    name = "Void";
    tam = 4;
};
VoidType* VoidType::instance(){
    if (!singleton_instance)
          singleton_instance = new VoidType();
        return singleton_instance;
};

//constructor
RecordType::RecordType(string *symname, arbol *newfields){    
    name = "Struct";
    symbolName = symname;
    SymTable = newfields;
    tam=0; //se inicializa en 0 pues luego se actualiza para un
	  // RecorType especifico
};

// Equivalencia por nombre en los records y unions
bool RecordType::operator==(RecordType &rhs){
    return (symbolName==rhs.symbolName);
}

//Retorna la tabla de simbolos de un arbol de un record
arbol* RecordType::getSymTable(){
     return SymTable;
};

//constructor
UnionType::UnionType(string *symname, arbol *newfields){
    name = "Union";
    symbolName = symname;
    SymTable = newfields;
    SymTable = new arbol();
    tam =0;
};

bool UnionType::operator==(UnionType &rhs){
    return (symbolName==rhs.symbolName);
}

//Retorna la tabla de simbolos de un arbol de un Union
arbol* UnionType::getSymTable(){
     return SymTable;
};

//Constructor de un ArrayType
ArrayType::ArrayType(int s, MadafakaType *t){
    name = "Array";
    size = s;
    type = t;
    tam =s;
};

FunctionType::FunctionType(arbol *arguments,MadafakaType *returntype){
    name = "Function";
    args = arguments;
    result = returntype;
};

MadafakaType* FunctionType::get_argument(int position){
  return buscarVariable(to_string(position),args);
}

RefType::RefType(){
    name = "Reference";
    tam = 4;
};
RefType* RefType::instance(){
    if (!singleton_instance)
          singleton_instance = new RefType();
     return singleton_instance;
};

TypeError::TypeError(){
    name = "TypeError";
};
TypeError* TypeError::instance(){
    if (!singleton_instance)
          singleton_instance = new TypeError();
        return singleton_instance;
};

Undeclared::Undeclared(){
    name = "Undeclared";
    tam =0;
};
Undeclared* Undeclared::instance(){
    if (!singleton_instance)
          singleton_instance = new Undeclared();
        return singleton_instance;
};

// Checkeo para las expresiones aritméticas
MadafakaType* check_and_widen(MadafakaType *left, MadafakaType *right){
  if ((*left != "Fdafak" && *left != "Idafak") || 
      (*right != "Fdafak" && *right != "Idafak")){
    return new TypeError();
  }
  else if ((*left == "Fdafak") || (*right == "Fdafak")) return new FloatType();
  else return new IntegerType();
}


// Checkeo de las expresiones booleanas
MadafakaType *checkBooolean(string &errormsg,MadafakaType *leftBool,MadafakaType *rightBool){
  if (*(leftBool) != "Bdafak" || *(rightBool) != "Bdafak") {
    errormsg = 
    string("Se intentó aplicar un operador booleano entre una expresión ");
    if (*(leftBool) == "TypeError"){
      errormsg+=string("malformada");
    }
    else{
      errormsg+=string("de tipo ")+ string(*(leftBool));
    }
    errormsg += string(" y otra ");
    if (*(rightBool) == "TypeError"){
      errormsg+=string("malformada");
    }
    else{
      errormsg+=string("de tipo ")+ string(*(rightBool));
    }
    return new TypeError();
  }
  else return new BoolType();
}

MadafakaType *checkArithmetic(string &errormsg,MadafakaType *leftArithmetic,MadafakaType *rightArithmetic){
  MadafakaType *widened = check_and_widen(leftArithmetic,rightArithmetic);
  if (*(widened) == "TypeError") {
    errormsg = 
    string("Se intentó aplicar un operador aritmético entre una expresión ");
    if (*(leftArithmetic) == "TypeError"){
      errormsg+=string("malformada");
    }
    else{
      errormsg+=string("de tipo ")+ string(*(leftArithmetic));
    }
    errormsg += string(" y otra ");
    if (*(rightArithmetic) == "TypeError"){
      errormsg+=string("malformada");
    }
    else{
      errormsg+=string("de tipo ")+ string(*(rightArithmetic));
    }
    return new TypeError();
  }
  else return widened;
}

MadafakaType *checkComparison(string &errormsg,MadafakaType *leftBool,MadafakaType *rightBool){
  if (
    ((*(leftBool) != "Idafak" && *(leftBool) != "Fdafak"))
   || ((*(rightBool) != "Idafak") && (*(rightBool) != "Fdafak")) 
     ){
    errormsg = 
    string("Se intentó aplicar un operador de comparación entre una expresión ");
    if (*(leftBool) == "TypeError"){
      errormsg+=string("malformada");
    }
    else{
      errormsg+=string("de tipo ")+ string(*(leftBool));
    }
    errormsg += string(" y otra ");
    if (*(rightBool) == "TypeError"){
      errormsg+=string("malformada");
    }
    else{
      errormsg+=string("de tipo ")+ string(*(rightBool));
    }
    return new TypeError();
  }
  else return new BoolType();
}

// bool compatible(MadafakaType *left, MadafakaType *right){
//   // Son el mismo tipo
//   // o son tipos compatibles
//   return (*left == *right)
//   || (*left == "Idafak" && *right == "Fdafak")
//   || (*left == "Fdafak" && *right == "Idafak");
// };

//funcion para agregar un hijo en un nodo del arbol de la tabla de
//simbolos

void arbol::addHijo(arbol *hijo)
{ (*hijo).setPapa(this);
  hijos.push_back(hijo);
}

//Asigna un padre a un nodo
void arbol::setPapa(arbol *padre){
  papa=padre;
}

//Retorna la lista de hijos de un nodo en el arbol de la tabla 
//de simbolos
vector<arbol*> arbol::getHijos(){
  return hijos;
}

//Retorna el apa de un nodo
arbol *arbol::getPapa(){
  return papa;
}

//Verifica si hay una variable de nombre s en el scope actual
int arbol::estaContenido(string &s){
  return contenido.count(s);
}

//inserta un MadafakaType en el scope del nodo
void arbol::insertar(string s,MadafakaType *tipo,int fila, int col, int si){
  
  //MadafakaType *valor = contenido[0];
  //cout << valor << endl;
  if(contenido.count(s)==0){
    contenido[s]=tipo;
    ubicacion[s] = make_pair(fila,col);
    if(si)
      bloque[s] = hijos.size()-1;
  }
  //cout << (*tipo).name << " " << s << endl;
}

//Indica de que tipo de variable es algun nombre
MadafakaType* arbol::tipoVar(string &var){
  if(contenido.count(var))
    return contenido[var];
  if(papa!=NULL)
    return (*papa).tipoVar(var);
  return NULL;
}

//Retorna el mapa de hijos de un nodo
map<string,MadafakaType*> arbol::getMapaContenido(){
  return contenido;
}

pair<int,int> arbol::getUbicacion(string& nombre){
  if(ubicacion.count(nombre))
    return ubicacion[nombre];
  return make_pair(-1,-1);
};

//Retorna las ubicaciones de todos los nodos, que es un mapa
map<string,pair<int,int> > arbol::getMapaUbicacion(){
  return ubicacion;
}

//Retorna los bloques correspondiente a un nodo o scope
map<string,int> arbol::getBloque(){
  return bloque;
}

//Busca el hijo del struct al cual debe moverse para verificacion
//de acceso a campos a tiempo de compilacion
arbol *arbol::hijoEnStruct(string &s){
  int t = bloque[s];
  return hijos[t];
}

 /*void arbol::esArray(string &var){
  string t = contenido[var];
  arrays[var]=t;
  contenido[var]="array"; 
 }*/

//Indica de que tipo es un arreglo
string arbol::getTipoArray(string &var){
  if(arrays.count(var))
    return arrays[var];
  if(papa!=NULL)
    return (*papa).getTipoArray(var);
  return "";
}

//Indica el tamanio de una variable
int arbol::getTam(string &n1){
	return contenido[n1]->tam;
}

//Indica la base actual del scope
//Nota: es acumulativa, al final va a quedar la sumatoria de 
//	todos los offsets
int arbol::getBase(){
	return base;
}

//Agrega a la base del scope un tamanio
void arbol::addBase(int val){
	base+=val;
}

//Setea el offset del nodo o scope
void arbol::setOffset(string &v, int val){
  offset[v]=val;
}

//indica el offset de una variable
int arbol::getOffset(string &var){
  if(!offset.count(var))
    return -9000000;//si no se encuentra exagero su offset
  return offset[var];
}

//Busca una variable iterativamente hasta llegar al anidamiento
//principal
MadafakaType *buscarVariable(string var, arbol *actual){
         arbol *aux = actual;
         while(aux!=NULL){
             if((*aux).estaContenido(var)) return (*aux).tipoVar(var);
             aux = (*aux).getPapa();
         }
         Undeclared* t = new Undeclared();
         return t;
}

//Busca el nodo o bloque correspondiente a una variable
arbol *buscarBloque(string var, arbol *actual){
    arbol *aux = actual;
    while(aux!=NULL){
             if((*aux).estaContenido(var)) return aux;
             aux = (*aux).getPapa();
        }
    return aux;
}

//Entra en un nuevo scope que se crea aqui
arbol *enterScope(arbol *actual){
  arbol *nuevo = new arbol;
  (*actual).addHijo(nuevo);
  actual = nuevo;
  return actual;
}


//sale del scope actual, y vuelve al del padre
arbol *exitScope(arbol *actual){
  actual = (*actual).getPapa();
  return actual;
}

void arbol::borrarMapaContenido(string &str){
  contenido.erase(str);
}

//Recorre el arbol y lo imprime en pantalla
void recorrer(arbol *a, int nivel){
  map<string, MadafakaType*> vars = (*a).getMapaContenido();
  map<string,pair<int,int> > ubic = (*a).getMapaUbicacion();
  map<string,int> bloques = (*a).getBloque();
  vector<arbol *> h = (*a).getHijos();
  set<int> ya;
  string s = "";
  for(int i=0;i<nivel;i++) s+='\t';
  
  cout << s << "Abriendo anidamiento de base " << (*a).getBase();
  cout <<endl<<endl;

  
  for(map<string,MadafakaType*>::iterator it = vars.begin();it!=vars.end();it++){
    string s2 = it->first;
    if(it->second->name!="Function" && (*a).getOffset(s2)<-800000) continue;
    cout << s+"\t" << it->first << " es de tipo " << it->second->name;
    
    
    if(it->second->name!="Function"){
      cout << " y su offset es: " << (*a).getOffset(s2);
      cout << " y tam: " << it->second->tam << endl;
    }
    cout << endl << endl;
    pair<int,int> p = ubic[it->first];
    int t1 = p.first;
    int t2 = p.second;
    cout << s+"\t" << "Ubicacion, fila: " << t1 << ", columna: "<<t2<<endl<<endl;
    
    if(it->second->name=="Struct"){
      recorrer(((RecordType *)it->second)->SymTable,nivel+1);
    }
    if(it->second->name=="Union"){
      recorrer(((UnionType *)it->second)->SymTable ,nivel+1);
    }
    
    //if(it->second->name=="Function" ){
      //recorrer(((FunctionType *)it->second)->args ,nivel+1);
      
    //}
    
    // if(it->second == "strdafak" || it->second=="unidafak"){
    //  int t = bloques[it->first];
    //  recorrer(h[t],nivel+1);
    //  ya.insert(t);
    // }
    string tmp1 = it->first;
    // if(it->second == "array" && ((*a).getTipoArray(tmp1)=="strdafak"
    //             || (*a).getTipoArray(tmp1)=="unidafak")){
    //  int t = bloques[tmp1];
    //  recorrer(h[t],nivel+1);
    //  ya.insert(t);

    // }
  }

  for(int i =0;i<h.size();i++){
    if(!ya.count(i) && h[i]->var)
      recorrer(h[i],nivel+1);
  }
  cout << s << "Cerrando anidamiendo" << endl<<endl;

}

/* main de prueba del archivo
int main(){
  string s = "bla1";
  (*actual).insertar(s,"strin");
  enterScope();
  enterScope();
  cout << buscarVariable(s) << endl;
}

*/
